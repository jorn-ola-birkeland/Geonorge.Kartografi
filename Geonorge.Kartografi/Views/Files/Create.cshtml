@using Geonorge.Kartografi.Helpers
@model Geonorge.Kartografi.Models.CartographyFile

@{
    ViewBag.Title = "Ny tegneregel";
}
@section breadcrumb {
    <li><a href="~/tegneregler/">Digital kartografi og symboler</a></li>
}

<section class="heading">
    <div class="row">
        <div class="col-sm-12">
            <h1>
                Legg til digital kartografi
            </h1>
        </div>
        <div class="col-sm-12">
            <span class="separator-lg"></span>
        </div>
    </div>
</section>


@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.OwnerOrganization, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="ownerOrganizationSelect form-control" id="OwnerOrganization" name="OwnerOrganization"> </select>
                @Html.ValidationMessageFor(model => model.OwnerOrganization, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OwnerPerson, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OwnerPerson, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OwnerPerson, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastEditedBy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastEditedBy, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastEditedBy, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", cols = "", rows = "2" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Format, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Format", ViewBag.Formats as SelectList, String.Empty, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OfficialStatus, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="radio" name="OfficialStatus" value="ja" /> Ja <input type="radio" name="OfficialStatus" value="nei" /> Nei
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Use, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Use, new { @class = "form-control", cols = "", rows = "2" })
                @Html.ValidationMessageFor(model => model.Use, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PreviewImage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" id="uploadPreviewImage" name="uploadPreviewImage" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FileName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" id="uploadFile" name="uploadFile" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Properties, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Properties, new { @class = "form-control", cols = "", rows = "2" })
                @Html.ValidationMessageFor(model => model.Properties, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.DatasetUuid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="datasetUuidSelect form-control" id="DatasetUuid" name="DatasetUuid"> </select>
                @Html.ValidationMessageFor(model => model.DatasetUuid, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.DatasetName)
                @Html.HiddenFor(model => model.Theme)
                @Html.ValidationMessageFor(model => model.DatasetName, "", new { @class = "text-danger" })
                @Html.ValidationMessageFor(model => model.Theme, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ServiceUuid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ServiceUuid, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ServiceUuid, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ServiceName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ServiceName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ServiceName, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.VersionId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.VersionId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.VersionId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateChanged, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateChanged, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateChanged, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateAccepted, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateAccepted, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateAccepted, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AcceptedComment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AcceptedComment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AcceptedComment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="clearfix"></div>

        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 hidden-print">
            <a class="hidden-print show-loading-animation pull-left" data-loading-message="Henter innhold" href="~/tegneregler/">Tilbake</a>
            <input type="submit" value="Foreslå" style="margin-left: 15px;" class="btn btn-default pull-right" />

        </div>
    </div>
}
<script type="text/javascript">
    var metadata = [];
    $('.datasetUuidSelect').select2({
        placeholder: "Søk etter datasett",
        language: "nb",
        ajax: {
            url: "@Html.KartkatalogenUrl()api/search",
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    text: params.term,// search term
                    limit: 10,
                    'facets[0]name' : "type",
                    'facets[0]value' : "dataset"
                };
            },
            processResults: function (data, params) {

                metadata = [];
                $.each(data.Results, function(i, item) {
                    option = {}
                    option["id"] = item.Uuid;
                    option["text"] = item.Title;
                    option["theme"] = item.Theme;

                    metadata.push(option);
                })

                return {
                    results: metadata
                };
            },
            cache: true
        },
        minimumInputLength: 3
    });

    $('.datasetUuidSelect').on('select2:select', function (evt) {

        var uuidSelected = $("#DatasetUuid").val();

        $.each(metadata, function (i, item) {
            if (uuidSelected == item.id) {
                $("#DatasetName").val(item.text);
                $("#Theme").val(item.theme);
            }
        })

    });

    var organizations = [];

    $('.ownerOrganizationSelect').select2({
        placeholder: "Søk etter organisasjon",
        language: "nb",
        ajax: {
            url: "@Html.RegistryUrl()api/search",
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    text: params.term,// search term
                    limit: 10,
                    'facets[0]name': "type",
                    'facets[0]value': "organisasjoner"
                };
            },
            processResults: function (data, params) {
                console.log(data);
                organizations = [];
                $.each(data.Results, function (i, item) {
                    option = {}
                    option["id"] = item.Name;
                    option["text"] = item.Name;

                    organizations.push(option);
                })

                return {
                    results: organizations
                };
            },
            cache: true
        },
        minimumInputLength: 3
    });

</script>
